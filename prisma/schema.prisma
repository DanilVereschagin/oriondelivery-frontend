generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    DONE
    CANCELLED
}

enum UserRole {
    USER
    ADMIN
}

enum DeliveryType {
    DEFAULT
    COMET
    LIGHT
}

model User {
    id Int @id @default(autoincrement())

    fullName String
    email    String    @unique
    password String
    role     UserRole  @default(USER)
    verified DateTime?

    provider   String?
    providerId String?

    cart             Cart?
    order            Order[]
    verificationCode VerificationCode?

    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt

    ProductFeedback ProductFeedback[]

    ProductStars ProductStars[]
}

model Category {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    products Product[]

    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt
}

model Product {
    id Int @id @default(autoincrement())

    name     String
    imageUrl String

    ingredients Ingredient[]
    variants    ProductVariant[]

    category   Category @relation(fields: [categoryId], references: [id])
    categoryId Int

    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt

    ProductFeedback ProductFeedback[]

    ProductStars ProductStars[]
}

model ProductFeedback {
    id Int @id @default(autoincrement())

    text String

    user   User? @relation(fields: [userId], references: [id])
    userId Int?

    product   Product @relation(fields: [productId], references: [id])
    productId Int

    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt

    @@unique([userId, productId])
}

model ProductStars {
    id Int @id @default(autoincrement())

    stars Int

    user   User? @relation(fields: [userId], references: [id])
    userId Int?

    product   Product @relation(fields: [productId], references: [id])
    productId Int

    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt

    @@unique([userId, productId])
}

model ProductVariant {
    id Int @id @default(autoincrement())

    price     Int
    size      Int?
    pizzaType Int?

    cartItems CartItem[]

    product   Product @relation(fields: [productId], references: [id])
    productId Int

    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt
}

model Ingredient {
    id Int @id @default(autoincrement())

    name     String @unique
    price    Int
    imageUrl String

    products  Product[]
    cartItems CartItem[]

    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt
}

model Cart {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?  @unique

    cartItems CartItem[]

    token String

    totalAmount Int @default(0)

    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt
}

model CartItem {
    id Int @id @default(autoincrement())

    productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
    productVariantId Int

    cart   Cart @relation(fields: [cartId], references: [id])
    cartId Int

    quantity Int @default(1)

    ingredients Ingredient[]

    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt
}

model Order {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?

    token String

    totalAmount Int
    status      OrderStatus
    paymentId   String?

    items Json

    fullName String
    address  String
    email    String
    phone    String
    comment  String?

    deliveryType DeliveryType @default(DEFAULT)

    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt
}

model VerificationCode {
    id Int @id @default(autoincrement())

    user   User @relation(fields: [userId], references: [id])
    userId Int  @unique

    code String

    createdAt DateTime @default(now())

    @@unique([userId, code])
}
